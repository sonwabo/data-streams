buildscript {
    ext {
        buildNumber = System.getenv('BITBUCKET_BUILD_NUMBER') ?: 'LOCAL-' + new Date().toString()
        logger.lifecycle "BUILD_NUMBER=$buildNumber"
        springBootVersion = '2.0.6.RELEASE'
        cfAppVersion = '2.3.0-rc.2'
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("pl.allegro.tech.build:axion-release-plugin:1.9.3")
        classpath("com.github.pivotalservices:ya-cf-app-gradle-plugin:${cfAppVersion}")
    }
}

plugins {
    id 'org.unbroken-dome.test-sets' version '2.0.2'
}
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply from: 'cloudfoundry.gradle'
apply from: 'release.gradle'

group = 'uk.co.omniolytics'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    maven {
        credentials {
            username rootProject.findProperty('jumpCoMavenUser') ?: System.getenv('MAVEN_USERNAME')
            password rootProject.findProperty('jumpCoMavenPassword') ?: System.getenv('MAVEN_PASSWORD')
        }
        url 'https://jumpco.jfrog.io/jumpco/libs'
    }
    jcenter()
    mavenCentral()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    maven { url 'https://repo.spring.io/milestone' }
}


ext {
    springBootAdminVersion = '2.0.4'
    springCloudVersion = 'Finchley.SR2'
    springFoxVersion = '3.0.0-SNAPSHOT'
}

testSets {
    integration
}

configurations {
    testImplementation.exclude group: 'ch.qos.logback'
    swaggerBrake
}
dependencies {
    if (rootProject.findProject(':omnio-model')) {
        implementation(project(':omnio-model'))
    } else {
        implementation('uk.co.omniolytics:omnio-model:1.0.7-SNAPSHOT')
    }
    if (rootProject.findProject(':omnio-data')) {
        implementation(project(':omnio-data'))
    } else {
        implementation('uk.co.omniolytics:omnio-data:1.0.8-SNAPSHOT')
    }

    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-cloud-connectors')

    implementation('org.springframework.cloud:spring-cloud-localconfig-connector')
    implementation('org.springframework.cloud:spring-cloud-cloudfoundry-connector')
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    implementation('org.springframework.cloud:spring-cloud-stream-binder-kafka-streams')
    implementation('org.springframework.cloud:spring-cloud-stream-binder-kafka')
    implementation('org.springframework.cloud:spring-cloud-stream')
    implementation('org.apache.kafka:kafka-streams')
    implementation('org.springframework.boot:spring-boot-starter-amqp')

    implementation('com.cloudant:cloudant-client')

    implementation('org.slf4j:slf4j-api')
    implementation('org.slf4j:slf4j-ext')

    implementation('joda-time:joda-time')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-joda')
    implementation('com.fasterxml.jackson.core:jackson-databind')

    implementation('de.codecentric:spring-boot-admin-starter-client')
    implementation('com.fasterxml.jackson.core:jackson-databind')
    implementation('com.ibm.messaging:watson-iot')


    compileOnly('org.projectlombok:lombok')
    // Test
    testImplementation('junit:junit:4.12')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testCompileOnly('org.projectlombok:lombok')
    testImplementation('org.assertj:assertj-core:3.11.1')
    testImplementation('org.skyscreamer:jsonassert')
    testImplementation('log4j:log4j')
    testImplementation('org.slf4j:slf4j-log4j12')

    swaggerBrake 'io.redskap:swagger-brake:0.1.0'

}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
    dependencies {
        dependency('org.slf4j:slf4j-api:1.7.25')
        dependency('org.slf4j:slf4j-ext:1.7.25')
        dependency('org.projectlombok:lombok:1.18.4')
        dependency('io.springfox:springfox-swagger2:' + springFoxVersion)
        dependency('io.springfox:springfox-swagger-ui:' + springFoxVersion)
        dependency('io.springfox:springfox-bean-validators:' + springFoxVersion)
        dependency('io.springfox:springfox-data-rest:' + springFoxVersion)
        dependency('org.modelmapper:modelmapper:2.3.1')
        dependency('com.github.jmnarloch:modelmapper-spring-boot-starter:1.1.0')
        dependency('org.skyscreamer:jsonassert:1.5.0')
        dependency('org.apache.commons:commons-csv:1.6')
        dependency('com.cloudant:cloudant-client:2.13.1')
        dependency('com.squareup.okhttp3:okhttp-urlconnection:3.8.1')
        dependency('com.ibm.messaging:watson-iot:0.2.6') {
            exclude group: 'log4j', name: 'log4j'
        }
        dependency('org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0')


    }
}


bootJar {
    archiveName = "${project.name}.jar"
    manifest {
        attributes 'Implementation-Version': project.version, 'Build-Number': buildNumber
    }
}


bootRun {
    jvmArgs = ['-Dspring.profiles.active=local']
}


check.dependsOn(integration)
integration.mustRunAfter(test)


test {
    if (!rootProject.hasProperty('includeManualTests')) {
        exclude '**/*ManualTest.*'
    }
    testLogging {
        showStandardStreams = true
    }
}

integration {
    testLogging {
        showStandardStreams = true
    }
}